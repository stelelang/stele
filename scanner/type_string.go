// Code generated by "stringer -type Type"; DO NOT EDIT.

package scanner

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[INVALID-0]
	_ = x[FUNC-1]
	_ = x[IMPORT-2]
	_ = x[LET-3]
	_ = x[TYPE-4]
	_ = x[IF-5]
	_ = x[ELSE-6]
	_ = x[SWITCH-7]
	_ = x[LPAREN-8]
	_ = x[RPAREN-9]
	_ = x[LBRACE-10]
	_ = x[RBRACE-11]
	_ = x[LBRACKET-12]
	_ = x[RBRACKET-13]
	_ = x[SEMI-14]
	_ = x[PLUS-15]
	_ = x[MINUS-16]
	_ = x[MULT-17]
	_ = x[DIV-18]
	_ = x[BITNOT-19]
	_ = x[BITOR-20]
	_ = x[BITAND-21]
	_ = x[NOT-22]
	_ = x[OR-23]
	_ = x[AND-24]
	_ = x[EQUAL-25]
	_ = x[NOTEQUAL-26]
	_ = x[ASSIGN-27]
	_ = x[DOT-28]
	_ = x[LSHIFT-29]
	_ = x[RSHIFT-30]
	_ = x[IDENT-31]
	_ = x[STRING-32]
	_ = x[INT-33]
	_ = x[FLOAT-34]
}

const _Type_name = "INVALIDFUNCIMPORTLETTYPEIFELSESWITCHLPARENRPARENLBRACERBRACELBRACKETRBRACKETSEMIPLUSMINUSMULTDIVBITNOTBITORBITANDNOTORANDEQUALNOTEQUALASSIGNDOTLSHIFTRSHIFTIDENTSTRINGINTFLOAT"

var _Type_index = [...]uint8{0, 7, 11, 17, 20, 24, 26, 30, 36, 42, 48, 54, 60, 68, 76, 80, 84, 89, 93, 96, 102, 107, 113, 116, 118, 121, 126, 134, 140, 143, 149, 155, 160, 166, 169, 174}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
